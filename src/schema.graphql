type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
  me: User!
  post: Post!
}
type Mutation {
  createUser(data: createUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: updateUserInput): User!
  createPost(data: createPostInput): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: updatePostInput): Post!
  createComment(data: createCommentInput): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, text: String): Comment!
}
type Subscription {
  post: PostSubscriptionPayload!
  comment(postId: ID!): CommentSubscriptionPayload!
}

input createUserInput {
  name: String!
  email: String!
  age: Int
}
input updateUserInput {
  name: String
  email: String
  age: Int
}
input createPostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}
input updatePostInput {
  title: String
  body: String
  published: Boolean
}
input createCommentInput {
  text: String!
  author: ID!
  postId: ID!
}
type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: [Post!]!
}

enum MytationType {
	CREATED
	UPDATED
	DELETED
}

type PostSubscriptionPayload {
	mutation: MytationType!
	data: Post!
}

type CommentSubscriptionPayload {
	mutation: MytationType!
	data: Comment!
}